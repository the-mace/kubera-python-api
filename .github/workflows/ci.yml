name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run linting (Ruff)
        run: |
          ruff check .

      - name: Check formatting (Ruff)
        run: |
          ruff format --check .

      - name: Run type checking (mypy)
        run: |
          mypy kubera

      - name: Run tests with coverage
        run: |
          pytest --cov=kubera --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  test-minimum-versions:
    name: Test with minimum dependency versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install minimum dependencies
        run: |
          python -m pip install --upgrade pip
          # Install minimum versions from pyproject.toml
          pip install httpx==0.27.0 python-dotenv==1.0.0 click==8.1.0 rich==13.0.0
          pip install pytest==8.2.0 pytest-asyncio==0.24.0 pytest-cov==4.1.0
          pip install -e . --no-deps

      - name: Run tests
        run: |
          pytest -v

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package with twine
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: dist
          path: dist/

  all-checks-passed:
    name: All checks passed
    if: always()
    needs: [test, test-minimum-versions, build]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether all checks passed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
